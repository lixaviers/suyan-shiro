<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lixavier.manage.dao.UserLetterMapper">
    <resultMap id="BaseResultMap" type="com.lixavier.manage.model.UserLetter">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="letter_id" jdbcType="BIGINT" property="letterId" />
    <result column="is_read" jdbcType="BIT" property="isRead" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, letter_id, is_read, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.lixavier.manage.model.UserLetterExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from tb_user_letter
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_user_letter
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from tb_user_letter
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.lixavier.manage.model.UserLetterExample">
    delete from tb_user_letter
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lixavier.manage.model.UserLetter">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into tb_user_letter (user_id, letter_id, is_read, 
      create_time, update_time)
    values (#{userId,jdbcType=BIGINT}, #{letterId,jdbcType=BIGINT}, #{isRead,jdbcType=BIT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.lixavier.manage.model.UserLetter">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into tb_user_letter
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="letterId != null">
        letter_id,
      </if>
      <if test="isRead != null">
        is_read,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="letterId != null">
        #{letterId,jdbcType=BIGINT},
      </if>
      <if test="isRead != null">
        #{isRead,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lixavier.manage.model.UserLetterExample" resultType="java.lang.Long">
    select count(*) from tb_user_letter
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_user_letter
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.letterId != null">
        letter_id = #{record.letterId,jdbcType=BIGINT},
      </if>
      <if test="record.isRead != null">
        is_read = #{record.isRead,jdbcType=BIT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_user_letter
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      letter_id = #{record.letterId,jdbcType=BIGINT},
      is_read = #{record.isRead,jdbcType=BIT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lixavier.manage.model.UserLetter">
    update tb_user_letter
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="letterId != null">
        letter_id = #{letterId,jdbcType=BIGINT},
      </if>
      <if test="isRead != null">
        is_read = #{isRead,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lixavier.manage.model.UserLetter">
    update tb_user_letter
    set user_id = #{userId,jdbcType=BIGINT},
      letter_id = #{letterId,jdbcType=BIGINT},
      is_read = #{isRead,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>



    <select id="selectByPrimaryKeyForUpdate" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        <include refid="Base_Column_List" />
        FROM tb_user_letter
        WHERE id = #{id,jdbcType=BIGINT} 
        FOR UPDATE
    </select>
    
    <select id="queryUserLetter" resultType="com.lixavier.manage.resp.page.UserLetterPageODTO" parameterType="com.lixavier.manage.req.UserLetterQueryDTO">
        SELECT
            letter.id,
            letter.title,
            letter.type,
            letter.content,
            user_letter.is_read,
            user_letter.create_time
        FROM
            tb_user_letter user_letter
        INNER JOIN tb_letter letter ON user_letter.letter_id = letter.id
        AND letter.is_deleted = 0
        WHERE
            user_letter.user_id = #{userId,jdbcType=BIGINT}
        <if test="type!=null">
            AND letter.type = #{type,jdbcType=TINYINT}
        </if>
        <if test="isRead!=null">
            AND user_letter.is_read = #{isRead,jdbcType=BOOLEAN}
        </if>
        ORDER BY
          user_letter.create_time desc,
          user_letter.id desc
    </select>

    <insert id="insertBatch" parameterType="java.util.List">
        insert into tb_user_letter (
            id,
            user_id,
            letter_id,
            is_read,
            create_time,
            update_time        )
        values
        <foreach collection="modelList" item="bean" index="index" separator=",">
        (
            #{bean.id,jdbcType=BIGINT} ,
            #{bean.userId,jdbcType=BIGINT} ,
            #{bean.letterId,jdbcType=BIGINT} ,
            #{bean.isRead,jdbcType=BOOLEAN} ,
            #{bean.createTime,jdbcType=TIMESTAMP} ,
            #{bean.updateTime,jdbcType=TIMESTAMP}         )
        </foreach>
    </insert>



    <select id="getUserLetterCount" resultType="com.lixavier.manage.resp.EnumODTO">
      SELECT
          letter.type as `value`,
          count( * ) as `count`
      FROM
          tb_user_letter user_letter
          INNER JOIN tb_letter letter ON letter.id = user_letter.letter_id
          AND letter.is_deleted = 0
      WHERE
          user_letter.user_id = #{userId,jdbcType=BIGINT}
	  AND user_letter.is_read = 0
      GROUP BY
          letter.type
      ORDER BY
          letter.type
    </select>

    
</mapper>