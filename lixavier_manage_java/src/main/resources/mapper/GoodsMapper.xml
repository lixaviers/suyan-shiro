<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lixavier.manage.dao.GoodsMapper">
    <resultMap id="BaseResultMap" type="com.lixavier.manage.model.Goods">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="category_id" jdbcType="BIGINT" property="categoryId" />
    <result column="brand_id" jdbcType="BIGINT" property="brandId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="inventory" jdbcType="INTEGER" property="inventory" />
    <result column="remaining_inventory" jdbcType="INTEGER" property="remainingInventory" />
    <result column="picture_url" jdbcType="VARCHAR" property="pictureUrl" />
    <result column="common_status" jdbcType="TINYINT" property="commonStatus" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, category_id, brand_id, name, price, inventory, remaining_inventory, picture_url, 
    common_status, create_time, update_time, is_deleted
  </sql>
  <select id="selectByExample" parameterType="com.lixavier.manage.model.GoodsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from tb_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_goods
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from tb_goods
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.lixavier.manage.model.GoodsExample">
    delete from tb_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lixavier.manage.model.Goods">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into tb_goods (category_id, brand_id, name, 
      price, inventory, remaining_inventory, 
      picture_url, common_status, create_time, 
      update_time, is_deleted)
    values (#{categoryId,jdbcType=BIGINT}, #{brandId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, 
      #{price,jdbcType=DECIMAL}, #{inventory,jdbcType=INTEGER}, #{remainingInventory,jdbcType=INTEGER}, 
      #{pictureUrl,jdbcType=VARCHAR}, #{commonStatus,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.lixavier.manage.model.Goods">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into tb_goods
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="brandId != null">
        brand_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="inventory != null">
        inventory,
      </if>
      <if test="remainingInventory != null">
        remaining_inventory,
      </if>
      <if test="pictureUrl != null">
        picture_url,
      </if>
      <if test="commonStatus != null">
        common_status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="categoryId != null">
        #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="brandId != null">
        #{brandId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="inventory != null">
        #{inventory,jdbcType=INTEGER},
      </if>
      <if test="remainingInventory != null">
        #{remainingInventory,jdbcType=INTEGER},
      </if>
      <if test="pictureUrl != null">
        #{pictureUrl,jdbcType=VARCHAR},
      </if>
      <if test="commonStatus != null">
        #{commonStatus,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lixavier.manage.model.GoodsExample" resultType="java.lang.Long">
    select count(*) from tb_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_goods
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=BIGINT},
      </if>
      <if test="record.brandId != null">
        brand_id = #{record.brandId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.inventory != null">
        inventory = #{record.inventory,jdbcType=INTEGER},
      </if>
      <if test="record.remainingInventory != null">
        remaining_inventory = #{record.remainingInventory,jdbcType=INTEGER},
      </if>
      <if test="record.pictureUrl != null">
        picture_url = #{record.pictureUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.commonStatus != null">
        common_status = #{record.commonStatus,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_goods
    set id = #{record.id,jdbcType=BIGINT},
      category_id = #{record.categoryId,jdbcType=BIGINT},
      brand_id = #{record.brandId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DECIMAL},
      inventory = #{record.inventory,jdbcType=INTEGER},
      remaining_inventory = #{record.remainingInventory,jdbcType=INTEGER},
      picture_url = #{record.pictureUrl,jdbcType=VARCHAR},
      common_status = #{record.commonStatus,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{record.isDeleted,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lixavier.manage.model.Goods">
    update tb_goods
    <set>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="brandId != null">
        brand_id = #{brandId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="inventory != null">
        inventory = #{inventory,jdbcType=INTEGER},
      </if>
      <if test="remainingInventory != null">
        remaining_inventory = #{remainingInventory,jdbcType=INTEGER},
      </if>
      <if test="pictureUrl != null">
        picture_url = #{pictureUrl,jdbcType=VARCHAR},
      </if>
      <if test="commonStatus != null">
        common_status = #{commonStatus,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lixavier.manage.model.Goods">
    update tb_goods
    set category_id = #{categoryId,jdbcType=BIGINT},
      brand_id = #{brandId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      inventory = #{inventory,jdbcType=INTEGER},
      remaining_inventory = #{remainingInventory,jdbcType=INTEGER},
      picture_url = #{pictureUrl,jdbcType=VARCHAR},
      common_status = #{commonStatus,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>


    <update id="logicalDeleteByPrimaryKey">
        UPDATE tb_goods
        SET
            is_deleted=1,
            updateUser=#{updateUser,jdbcType=VARCHAR},
            updateUserName=#{updateUserName,jdbcType=VARCHAR}
        WHERE id = #{id,jdbcType=BIGINT} 
    </update>

    <select id="selectByPrimaryKeyForUpdate" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        <include refid="Base_Column_List" />
        FROM tb_goods
        WHERE id = #{id,jdbcType=BIGINT} 
        AND is_deleted=0
        FOR UPDATE
    </select>
    
    <select id="queryGoods" resultMap="BaseResultMap" parameterType="com.lixavier.manage.req.GoodsQueryDTO">
        SELECT
            id,
            category_id,
            brand_id,
            name,
            price,
            inventory,
            remaining_inventory,
            description.description,
            picture_url,
            common_status,
            create_time,
            update_time,
            is_deleted
        FROM tb_goods goods
        LEFT JOIN tb_goods_description description ON goods.id = description.goods_id
        <where>
            <if test="id!=null">AND id = #{id,jdbcType=BIGINT}</if>
            <if test="categoryId!=null">AND category_id = #{categoryId,jdbcType=BIGINT}</if>
            <if test="categoryIdList != null and categoryIdList.size > 0">
                <foreach item="item" separator="," open="AND category_id in (" close=")" collection="categoryIdList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="brandId!=null">AND brand_id = #{brandId,jdbcType=BIGINT}</if>
            <if test="brandIdList != null and brandIdList.size > 0">
                <foreach item="item" separator="," open="AND brand_id in (" close=")" collection="brandIdList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="name!=null and name!=''">AND name = #{name,jdbcType=VARCHAR}</if>
            <if test="nameLike != null and nameLike != '' ">AND name LIKE concat(#{nameLike,jdbcType=VARCHAR},'%')</if>
            <if test="priceFrom != null"><![CDATA[AND price >= #{priceFrom,jdbcType=DECIMAL}]]></if>
            <if test="priceTo != null"><![CDATA[AND price <= #{priceTo,jdbcType=DECIMAL}]]></if>
            <if test="inventory!=null">AND inventory = #{inventory,jdbcType=INTEGER}</if>
            <if test="inventoryList != null and inventoryList.size > 0">
                <foreach item="item" separator="," open="AND inventory in (" close=")" collection="inventoryList">#{item,jdbcType=INTEGER}</foreach>
            </if>
            <if test="remainingInventory!=null">AND remaining_inventory = #{remainingInventory,jdbcType=INTEGER}</if>
            <if test="remainingInventoryList != null and remainingInventoryList.size > 0">
                <foreach item="item" separator="," open="AND remaining_inventory in (" close=")" collection="remainingInventoryList">#{item,jdbcType=INTEGER}</foreach>
            </if>
            <if test="pictureUrl!=null and pictureUrl!=''">AND picture_url = #{pictureUrl,jdbcType=VARCHAR}</if>
            <if test="pictureUrlLike != null and pictureUrlLike != '' ">AND picture_url LIKE concat(#{pictureUrlLike,jdbcType=VARCHAR},'%')</if>
            <if test="pictureUrlList != null and pictureUrlList.size > 0">
                <foreach item="item" separator="," open="AND picture_url in (" close=")" collection="pictureUrlList">#{item,jdbcType=VARCHAR}</foreach>
            </if>
            <if test="commonStatus!=null">AND common_status = #{commonStatus,jdbcType=TINYINT}</if>
            <if test="commonStatusList != null and commonStatusList.size > 0">
                <foreach item="item" separator="," open="AND common_status in (" close=")" collection="commonStatusList">#{item,jdbcType=TINYINT}</foreach>
            </if>
            <if test="createTimeFrom != null"><![CDATA[AND create_time >= #{createTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="createTimeTo != null"><![CDATA[AND create_time <= #{createTimeTo,jdbcType=TIMESTAMP}]]></if>
            <if test="isDeleted!=null">AND is_deleted = #{isDeleted,jdbcType=BOOLEAN}</if>
        </where>
        <choose>
            <when test="orderBy!=null and orderBy!=''">order by ${orderBy}</when>
            <otherwise>order by id</otherwise>
        </choose>
    </select>

    <insert id="insertBatch" parameterType="java.util.List">
        insert into tb_goods (
            category_id,
            brand_id,
            name,
            price,
            inventory,
            remaining_inventory,
            picture_url,
            common_status,
            create_time,
            update_time,
            is_deleted        )
        values
        <foreach collection="modelList" item="bean" index="index" separator=",">
        (
            #{bean.categoryId,jdbcType=BIGINT} ,
            #{bean.brandId,jdbcType=BIGINT} ,
            #{bean.name,jdbcType=VARCHAR} ,
            #{bean.price,jdbcType=DECIMAL} ,
            #{bean.inventory,jdbcType=INTEGER} ,
            #{bean.remainingInventory,jdbcType=INTEGER} ,
            #{bean.pictureUrl,jdbcType=VARCHAR} ,
            #{bean.commonStatus,jdbcType=TINYINT} ,
            #{bean.createTime,jdbcType=TIMESTAMP} ,
            #{bean.updateTime,jdbcType=TIMESTAMP} ,
            #{bean.isDeleted,jdbcType=BOOLEAN}         )
        </foreach>
    </insert>


    <select id="getGoodsById" parameterType="java.lang.Long" resultType="com.lixavier.manage.model.Goods">
        SELECT
            id,
            category_id,
            brand_id,
            name,
            price,
            inventory,
            remaining_inventory,
            description.description,
            picture_url,
            common_status,
            create_time,
            update_time,
            is_deleted
        FROM
            tb_goods goods
        LEFT JOIN tb_goods_description description ON goods.id = description.goods_id
        WHERE id = #{id,jdbcType=BIGINT}
    </select>


    <select id="queryGoodsList" resultType="com.lixavier.manage.model.Goods">
        SELECT
          id,
          category_id,
          brand_id,
          name,
          price,
          inventory,
          remaining_inventory,
          picture_url,
          create_time
        FROM
          tb_goods
        WHERE
            is_deleted = 0
        AND common_status = #{commonStatus, jdbcType=TINYINT}
        <if test="categoryId != null">
            AND category_id IN (SELECT id FROM tb_category WHERE parent_id = #{categoryId, jdbcType=BIGINT} AND is_deleted = 0)
        </if>
    </select>



    <update id="deductingInventory">
        UPDATE tb_goods
        SET remaining_inventory = remaining_inventory - #{number,jdbcType=INTEGER}
        WHERE
            id = #{id,jdbcType=BIGINT}
        AND is_deleted = 0
        AND remaining_inventory >= #{number,jdbcType=INTEGER}
    </update>

    <update id="releaseInventory">
        UPDATE tb_goods
        SET remaining_inventory = remaining_inventory + #{number,jdbcType=INTEGER}
        WHERE
            id = #{id,jdbcType=BIGINT}
    </update>



</mapper>