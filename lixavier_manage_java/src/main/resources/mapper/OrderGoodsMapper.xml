<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lixavier.manage.dao.OrderGoodsMapper">
    <resultMap id="BaseResultMap" type="com.lixavier.manage.model.OrderGoods">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="order_no" jdbcType="VARCHAR" property="orderNo" />
    <result column="goods_id" jdbcType="BIGINT" property="goodsId" />
    <result column="goods_name" jdbcType="VARCHAR" property="goodsName" />
    <result column="goods_number" jdbcType="INTEGER" property="goodsNumber" />
    <result column="goods_price" jdbcType="DECIMAL" property="goodsPrice" />
    <result column="total_price" jdbcType="DECIMAL" property="totalPrice" />
    <result column="promotion_price" jdbcType="DECIMAL" property="promotionPrice" />
    <result column="gift_card_price" jdbcType="DECIMAL" property="giftCardPrice" />
    <result column="pay_price" jdbcType="DECIMAL" property="payPrice" />
    <result column="common_status" jdbcType="TINYINT" property="commonStatus" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="delivery_time" jdbcType="TIMESTAMP" property="deliveryTime" />
    <result column="deal_time" jdbcType="TIMESTAMP" property="dealTime" />
    <result column="refund_time" jdbcType="TIMESTAMP" property="refundTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, order_id, order_no, goods_id, goods_name, goods_number, goods_price, 
    total_price, promotion_price, gift_card_price, pay_price, common_status, pay_time, 
    delivery_time, deal_time, refund_time, create_time, update_time, is_deleted
  </sql>
  <select id="selectByExample" parameterType="com.lixavier.manage.model.OrderGoodsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from tb_order_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_order_goods
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from tb_order_goods
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.lixavier.manage.model.OrderGoodsExample">
    delete from tb_order_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lixavier.manage.model.OrderGoods">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into tb_order_goods (user_id, order_id, order_no, 
      goods_id, goods_name, goods_number, 
      goods_price, total_price, promotion_price, 
      gift_card_price, pay_price, common_status, 
      pay_time, delivery_time, deal_time, 
      refund_time, create_time, update_time, 
      is_deleted)
    values (#{userId,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT}, #{orderNo,jdbcType=VARCHAR}, 
      #{goodsId,jdbcType=BIGINT}, #{goodsName,jdbcType=VARCHAR}, #{goodsNumber,jdbcType=INTEGER}, 
      #{goodsPrice,jdbcType=DECIMAL}, #{totalPrice,jdbcType=DECIMAL}, #{promotionPrice,jdbcType=DECIMAL}, 
      #{giftCardPrice,jdbcType=DECIMAL}, #{payPrice,jdbcType=DECIMAL}, #{commonStatus,jdbcType=TINYINT}, 
      #{payTime,jdbcType=TIMESTAMP}, #{deliveryTime,jdbcType=TIMESTAMP}, #{dealTime,jdbcType=TIMESTAMP}, 
      #{refundTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{isDeleted,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.lixavier.manage.model.OrderGoods">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into tb_order_goods
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="goodsName != null">
        goods_name,
      </if>
      <if test="goodsNumber != null">
        goods_number,
      </if>
      <if test="goodsPrice != null">
        goods_price,
      </if>
      <if test="totalPrice != null">
        total_price,
      </if>
      <if test="promotionPrice != null">
        promotion_price,
      </if>
      <if test="giftCardPrice != null">
        gift_card_price,
      </if>
      <if test="payPrice != null">
        pay_price,
      </if>
      <if test="commonStatus != null">
        common_status,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="deliveryTime != null">
        delivery_time,
      </if>
      <if test="dealTime != null">
        deal_time,
      </if>
      <if test="refundTime != null">
        refund_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=BIGINT},
      </if>
      <if test="goodsName != null">
        #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="goodsNumber != null">
        #{goodsNumber,jdbcType=INTEGER},
      </if>
      <if test="goodsPrice != null">
        #{goodsPrice,jdbcType=DECIMAL},
      </if>
      <if test="totalPrice != null">
        #{totalPrice,jdbcType=DECIMAL},
      </if>
      <if test="promotionPrice != null">
        #{promotionPrice,jdbcType=DECIMAL},
      </if>
      <if test="giftCardPrice != null">
        #{giftCardPrice,jdbcType=DECIMAL},
      </if>
      <if test="payPrice != null">
        #{payPrice,jdbcType=DECIMAL},
      </if>
      <if test="commonStatus != null">
        #{commonStatus,jdbcType=TINYINT},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deliveryTime != null">
        #{deliveryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealTime != null">
        #{dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="refundTime != null">
        #{refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lixavier.manage.model.OrderGoodsExample" resultType="java.lang.Long">
    select count(*) from tb_order_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_order_goods
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.orderNo != null">
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsId != null">
        goods_id = #{record.goodsId,jdbcType=BIGINT},
      </if>
      <if test="record.goodsName != null">
        goods_name = #{record.goodsName,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsNumber != null">
        goods_number = #{record.goodsNumber,jdbcType=INTEGER},
      </if>
      <if test="record.goodsPrice != null">
        goods_price = #{record.goodsPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.totalPrice != null">
        total_price = #{record.totalPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.promotionPrice != null">
        promotion_price = #{record.promotionPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.giftCardPrice != null">
        gift_card_price = #{record.giftCardPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.payPrice != null">
        pay_price = #{record.payPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.commonStatus != null">
        common_status = #{record.commonStatus,jdbcType=TINYINT},
      </if>
      <if test="record.payTime != null">
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deliveryTime != null">
        delivery_time = #{record.deliveryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dealTime != null">
        deal_time = #{record.dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.refundTime != null">
        refund_time = #{record.refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_order_goods
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      order_id = #{record.orderId,jdbcType=BIGINT},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      goods_id = #{record.goodsId,jdbcType=BIGINT},
      goods_name = #{record.goodsName,jdbcType=VARCHAR},
      goods_number = #{record.goodsNumber,jdbcType=INTEGER},
      goods_price = #{record.goodsPrice,jdbcType=DECIMAL},
      total_price = #{record.totalPrice,jdbcType=DECIMAL},
      promotion_price = #{record.promotionPrice,jdbcType=DECIMAL},
      gift_card_price = #{record.giftCardPrice,jdbcType=DECIMAL},
      pay_price = #{record.payPrice,jdbcType=DECIMAL},
      common_status = #{record.commonStatus,jdbcType=TINYINT},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      delivery_time = #{record.deliveryTime,jdbcType=TIMESTAMP},
      deal_time = #{record.dealTime,jdbcType=TIMESTAMP},
      refund_time = #{record.refundTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{record.isDeleted,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lixavier.manage.model.OrderGoods">
    update tb_order_goods
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=BIGINT},
      </if>
      <if test="goodsName != null">
        goods_name = #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="goodsNumber != null">
        goods_number = #{goodsNumber,jdbcType=INTEGER},
      </if>
      <if test="goodsPrice != null">
        goods_price = #{goodsPrice,jdbcType=DECIMAL},
      </if>
      <if test="totalPrice != null">
        total_price = #{totalPrice,jdbcType=DECIMAL},
      </if>
      <if test="promotionPrice != null">
        promotion_price = #{promotionPrice,jdbcType=DECIMAL},
      </if>
      <if test="giftCardPrice != null">
        gift_card_price = #{giftCardPrice,jdbcType=DECIMAL},
      </if>
      <if test="payPrice != null">
        pay_price = #{payPrice,jdbcType=DECIMAL},
      </if>
      <if test="commonStatus != null">
        common_status = #{commonStatus,jdbcType=TINYINT},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deliveryTime != null">
        delivery_time = #{deliveryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealTime != null">
        deal_time = #{dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="refundTime != null">
        refund_time = #{refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lixavier.manage.model.OrderGoods">
    update tb_order_goods
    set user_id = #{userId,jdbcType=BIGINT},
      order_id = #{orderId,jdbcType=BIGINT},
      order_no = #{orderNo,jdbcType=VARCHAR},
      goods_id = #{goodsId,jdbcType=BIGINT},
      goods_name = #{goodsName,jdbcType=VARCHAR},
      goods_number = #{goodsNumber,jdbcType=INTEGER},
      goods_price = #{goodsPrice,jdbcType=DECIMAL},
      total_price = #{totalPrice,jdbcType=DECIMAL},
      promotion_price = #{promotionPrice,jdbcType=DECIMAL},
      gift_card_price = #{giftCardPrice,jdbcType=DECIMAL},
      pay_price = #{payPrice,jdbcType=DECIMAL},
      common_status = #{commonStatus,jdbcType=TINYINT},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      delivery_time = #{deliveryTime,jdbcType=TIMESTAMP},
      deal_time = #{dealTime,jdbcType=TIMESTAMP},
      refund_time = #{refundTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>


    <update id="logicalDeleteByPrimaryKey">
        UPDATE tb_order_goods
        SET
            is_deleted=1
        WHERE id = #{id,jdbcType=BIGINT} 
    </update>

    <select id="selectByPrimaryKeyForUpdate" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        <include refid="Base_Column_List" />
        FROM tb_order_goods
        WHERE id = #{id,jdbcType=BIGINT} 
        AND is_deleted=0
        FOR UPDATE
    </select>
    
    <select id="queryOrderGoods" resultMap="BaseResultMap" parameterType="com.lixavier.manage.req.OrderGoodsQueryDTO">
        SELECT
         <choose>
          <when test="returnFields!=null">${returnFields}</when>
          <otherwise>
            <include refid="Base_Column_List" />
          </otherwise>
        </choose>
        FROM tb_order_goods
        <where>
            <if test="id!=null">AND id = #{id,jdbcType=BIGINT}</if>
            <if test="idList != null and idList.size > 0">
                <foreach item="item" separator="," open="AND id in (" close=")" collection="idList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="userId!=null">AND user_id = #{userId,jdbcType=BIGINT}</if>
            <if test="userIdList != null and userIdList.size > 0">
                <foreach item="item" separator="," open="AND user_id in (" close=")" collection="userIdList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="orderId!=null">AND order_id = #{orderId,jdbcType=BIGINT}</if>
            <if test="orderIdList != null and orderIdList.size > 0">
                <foreach item="item" separator="," open="AND order_id in (" close=")" collection="orderIdList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="orderNo!=null and orderNo!=''">AND order_no = #{orderNo,jdbcType=VARCHAR}</if>
            <if test="orderNoLike != null and orderNoLike != '' ">AND order_no LIKE concat(#{orderNoLike,jdbcType=VARCHAR},'%')</if>
            <if test="orderNoList != null and orderNoList.size > 0">
                <foreach item="item" separator="," open="AND order_no in (" close=")" collection="orderNoList">#{item,jdbcType=VARCHAR}</foreach>
            </if>
            <if test="goodsId!=null">AND goods_id = #{goodsId,jdbcType=BIGINT}</if>
            <if test="goodsIdList != null and goodsIdList.size > 0">
                <foreach item="item" separator="," open="AND goods_id in (" close=")" collection="goodsIdList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="goodsName!=null and goodsName!=''">AND goods_name = #{goodsName,jdbcType=VARCHAR}</if>
            <if test="goodsNameLike != null and goodsNameLike != '' ">AND goods_name LIKE concat(#{goodsNameLike,jdbcType=VARCHAR},'%')</if>
            <if test="goodsNameList != null and goodsNameList.size > 0">
                <foreach item="item" separator="," open="AND goods_name in (" close=")" collection="goodsNameList">#{item,jdbcType=VARCHAR}</foreach>
            </if>
            <if test="goodsNumber!=null">AND goods_number = #{goodsNumber,jdbcType=INTEGER}</if>
            <if test="goodsNumberList != null and goodsNumberList.size > 0">
                <foreach item="item" separator="," open="AND goods_number in (" close=")" collection="goodsNumberList">#{item,jdbcType=INTEGER}</foreach>
            </if>
            <if test="goodsPriceFrom != null"><![CDATA[AND goods_price >= #{goodsPriceFrom,jdbcType=DECIMAL}]]></if>
            <if test="goodsPriceTo != null"><![CDATA[AND goods_price <= #{goodsPriceTo,jdbcType=DECIMAL}]]></if>
            <if test="totalPriceFrom != null"><![CDATA[AND total_price >= #{totalPriceFrom,jdbcType=DECIMAL}]]></if>
            <if test="totalPriceTo != null"><![CDATA[AND total_price <= #{totalPriceTo,jdbcType=DECIMAL}]]></if>
            <if test="promotionPriceFrom != null"><![CDATA[AND promotion_price >= #{promotionPriceFrom,jdbcType=DECIMAL}]]></if>
            <if test="promotionPriceTo != null"><![CDATA[AND promotion_price <= #{promotionPriceTo,jdbcType=DECIMAL}]]></if>
            <if test="giftCardPriceFrom != null"><![CDATA[AND gift_card_price >= #{giftCardPriceFrom,jdbcType=DECIMAL}]]></if>
            <if test="giftCardPriceTo != null"><![CDATA[AND gift_card_price <= #{giftCardPriceTo,jdbcType=DECIMAL}]]></if>
            <if test="payPriceFrom != null"><![CDATA[AND pay_price >= #{payPriceFrom,jdbcType=DECIMAL}]]></if>
            <if test="payPriceTo != null"><![CDATA[AND pay_price <= #{payPriceTo,jdbcType=DECIMAL}]]></if>
            <if test="commonStatus!=null">AND common_status = #{commonStatus,jdbcType=TINYINT}</if>
            <if test="commonStatusList != null and commonStatusList.size > 0">
                <foreach item="item" separator="," open="AND common_status in (" close=")" collection="commonStatusList">#{item,jdbcType=TINYINT}</foreach>
            </if>
            <if test="payTimeFrom != null"><![CDATA[AND pay_time >= #{payTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="payTimeTo != null"><![CDATA[AND pay_time <= #{payTimeTo,jdbcType=TIMESTAMP}]]></if>
            <if test="deliveryTimeFrom != null"><![CDATA[AND delivery_time >= #{deliveryTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="deliveryTimeTo != null"><![CDATA[AND delivery_time <= #{deliveryTimeTo,jdbcType=TIMESTAMP}]]></if>
            <if test="dealTimeFrom != null"><![CDATA[AND deal_time >= #{dealTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="dealTimeTo != null"><![CDATA[AND deal_time <= #{dealTimeTo,jdbcType=TIMESTAMP}]]></if>
            <if test="refundTimeFrom != null"><![CDATA[AND refund_time >= #{refundTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="refundTimeTo != null"><![CDATA[AND refund_time <= #{refundTimeTo,jdbcType=TIMESTAMP}]]></if>
            <if test="createTimeFrom != null"><![CDATA[AND create_time >= #{createTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="createTimeTo != null"><![CDATA[AND create_time <= #{createTimeTo,jdbcType=TIMESTAMP}]]></if>
            <if test="updateTimeFrom != null"><![CDATA[AND update_time >= #{updateTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="updateTimeTo != null"><![CDATA[AND update_time <= #{updateTimeTo,jdbcType=TIMESTAMP}]]></if>
            <if test="isDeleted!=null">AND is_deleted = #{isDeleted,jdbcType=BOOLEAN}</if>
            <if test="isDeletedList != null and isDeletedList.size > 0">
                <foreach item="item" separator="," open="AND is_deleted in (" close=")" collection="isDeletedList">#{item,jdbcType=BOOLEAN}</foreach>
            </if>
        </where>
        <choose>
            <when test="orderBy!=null and orderBy!=''">order by ${orderBy}</when>
            <otherwise>order by id</otherwise>
        </choose>
    </select>

    <insert id="insertBatch" parameterType="java.util.List">
        insert into tb_order_goods (
            user_id,
            order_id,
            order_no,
            goods_id,
            goods_name,
            goods_number,
            goods_price,
            total_price,
            promotion_price,
            gift_card_price,
            pay_price,
            common_status,
            pay_time,
            delivery_time,
            deal_time,
            refund_time,
            create_time,
            update_time,
            is_deleted        )
        values
        <foreach collection="modelList" item="bean" index="index" separator=",">
        (
            #{bean.userId,jdbcType=BIGINT} ,
            #{bean.orderId,jdbcType=BIGINT} ,
            #{bean.orderNo,jdbcType=VARCHAR} ,
            #{bean.goodsId,jdbcType=BIGINT} ,
            #{bean.goodsName,jdbcType=VARCHAR} ,
            #{bean.goodsNumber,jdbcType=INTEGER} ,
            #{bean.goodsPrice,jdbcType=DECIMAL} ,
            #{bean.totalPrice,jdbcType=DECIMAL} ,
            #{bean.promotionPrice,jdbcType=DECIMAL} ,
            #{bean.giftCardPrice,jdbcType=DECIMAL} ,
            #{bean.payPrice,jdbcType=DECIMAL} ,
            #{bean.commonStatus,jdbcType=TINYINT} ,
            #{bean.payTime,jdbcType=TIMESTAMP} ,
            #{bean.deliveryTime,jdbcType=TIMESTAMP} ,
            #{bean.dealTime,jdbcType=TIMESTAMP} ,
            #{bean.refundTime,jdbcType=TIMESTAMP} ,
            #{bean.createTime,jdbcType=TIMESTAMP} ,
            #{bean.updateTime,jdbcType=TIMESTAMP} ,
            #{bean.isDeleted,jdbcType=BOOLEAN}         )
        </foreach>
    </insert>

    
</mapper>