<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lixavier.manage.dao.GoodsCommentMapper">
    <resultMap id="BaseResultMap" type="com.lixavier.manage.model.GoodsComment">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="goods_id" jdbcType="BIGINT" property="goodsId" />
    <result column="order_goods_id" jdbcType="BIGINT" property="orderGoodsId" />
    <result column="is_anonymous" jdbcType="BIT" property="isAnonymous" />
    <result column="nick_name" jdbcType="VARCHAR" property="nickName" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="pic_urls" jdbcType="VARCHAR" property="picUrls" />
    <result column="is_reply" jdbcType="BIT" property="isReply" />
    <result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, goods_id, order_goods_id, is_anonymous, nick_name, content, pic_urls, 
    is_reply, reply_content, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.lixavier.manage.model.GoodsCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from tb_goods_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_goods_comment
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from tb_goods_comment
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.lixavier.manage.model.GoodsCommentExample">
    delete from tb_goods_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lixavier.manage.model.GoodsComment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into tb_goods_comment (user_id, goods_id, order_goods_id, 
      is_anonymous, nick_name, content, 
      pic_urls, is_reply, reply_content, 
      create_time, update_time)
    values (#{userId,jdbcType=BIGINT}, #{goodsId,jdbcType=BIGINT}, #{orderGoodsId,jdbcType=BIGINT}, 
      #{isAnonymous,jdbcType=BIT}, #{nickName,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, 
      #{picUrls,jdbcType=VARCHAR}, #{isReply,jdbcType=BIT}, #{replyContent,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.lixavier.manage.model.GoodsComment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into tb_goods_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="orderGoodsId != null">
        order_goods_id,
      </if>
      <if test="isAnonymous != null">
        is_anonymous,
      </if>
      <if test="nickName != null">
        nick_name,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="picUrls != null">
        pic_urls,
      </if>
      <if test="isReply != null">
        is_reply,
      </if>
      <if test="replyContent != null">
        reply_content,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=BIGINT},
      </if>
      <if test="orderGoodsId != null">
        #{orderGoodsId,jdbcType=BIGINT},
      </if>
      <if test="isAnonymous != null">
        #{isAnonymous,jdbcType=BIT},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="picUrls != null">
        #{picUrls,jdbcType=VARCHAR},
      </if>
      <if test="isReply != null">
        #{isReply,jdbcType=BIT},
      </if>
      <if test="replyContent != null">
        #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lixavier.manage.model.GoodsCommentExample" resultType="java.lang.Long">
    select count(*) from tb_goods_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_goods_comment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.goodsId != null">
        goods_id = #{record.goodsId,jdbcType=BIGINT},
      </if>
      <if test="record.orderGoodsId != null">
        order_goods_id = #{record.orderGoodsId,jdbcType=BIGINT},
      </if>
      <if test="record.isAnonymous != null">
        is_anonymous = #{record.isAnonymous,jdbcType=BIT},
      </if>
      <if test="record.nickName != null">
        nick_name = #{record.nickName,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.picUrls != null">
        pic_urls = #{record.picUrls,jdbcType=VARCHAR},
      </if>
      <if test="record.isReply != null">
        is_reply = #{record.isReply,jdbcType=BIT},
      </if>
      <if test="record.replyContent != null">
        reply_content = #{record.replyContent,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_goods_comment
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      goods_id = #{record.goodsId,jdbcType=BIGINT},
      order_goods_id = #{record.orderGoodsId,jdbcType=BIGINT},
      is_anonymous = #{record.isAnonymous,jdbcType=BIT},
      nick_name = #{record.nickName,jdbcType=VARCHAR},
      content = #{record.content,jdbcType=VARCHAR},
      pic_urls = #{record.picUrls,jdbcType=VARCHAR},
      is_reply = #{record.isReply,jdbcType=BIT},
      reply_content = #{record.replyContent,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lixavier.manage.model.GoodsComment">
    update tb_goods_comment
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=BIGINT},
      </if>
      <if test="orderGoodsId != null">
        order_goods_id = #{orderGoodsId,jdbcType=BIGINT},
      </if>
      <if test="isAnonymous != null">
        is_anonymous = #{isAnonymous,jdbcType=BIT},
      </if>
      <if test="nickName != null">
        nick_name = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="picUrls != null">
        pic_urls = #{picUrls,jdbcType=VARCHAR},
      </if>
      <if test="isReply != null">
        is_reply = #{isReply,jdbcType=BIT},
      </if>
      <if test="replyContent != null">
        reply_content = #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lixavier.manage.model.GoodsComment">
    update tb_goods_comment
    set user_id = #{userId,jdbcType=BIGINT},
      goods_id = #{goodsId,jdbcType=BIGINT},
      order_goods_id = #{orderGoodsId,jdbcType=BIGINT},
      is_anonymous = #{isAnonymous,jdbcType=BIT},
      nick_name = #{nickName,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      pic_urls = #{picUrls,jdbcType=VARCHAR},
      is_reply = #{isReply,jdbcType=BIT},
      reply_content = #{replyContent,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>



    <select id="selectByPrimaryKeyForUpdate" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        <include refid="Base_Column_List" />
        FROM tb_goods_comment
        WHERE id = #{id,jdbcType=BIGINT} 
        FOR UPDATE
    </select>
    
    <select id="queryGoodsComment" resultMap="BaseResultMap" parameterType="com.lixavier.manage.req.GoodsCommentQueryDTO">
        SELECT
         <choose>
          <when test="returnFields!=null">${returnFields}</when>
          <otherwise>
            <include refid="Base_Column_List" />
          </otherwise>
        </choose>
        FROM tb_goods_comment
        <where>
            <if test="id!=null">AND id = #{id,jdbcType=BIGINT}</if>
            <if test="idList != null and idList.size > 0">
                <foreach item="item" separator="," open="AND id in (" close=")" collection="idList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="userId!=null">AND user_id = #{userId,jdbcType=BIGINT}</if>
            <if test="userIdList != null and userIdList.size > 0">
                <foreach item="item" separator="," open="AND user_id in (" close=")" collection="userIdList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="goodsId!=null">AND goods_id = #{goodsId,jdbcType=BIGINT}</if>
            <if test="goodsIdList != null and goodsIdList.size > 0">
                <foreach item="item" separator="," open="AND goods_id in (" close=")" collection="goodsIdList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="orderGoodsId!=null">AND order_goods_id = #{orderGoodsId,jdbcType=BIGINT}</if>
            <if test="orderGoodsIdList != null and orderGoodsIdList.size > 0">
                <foreach item="item" separator="," open="AND order_goods_id in (" close=")" collection="orderGoodsIdList">#{item,jdbcType=BIGINT}</foreach>
            </if>
            <if test="isAnonymous!=null">AND is_anonymous = #{isAnonymous,jdbcType=BOOLEAN}</if>
            <if test="isAnonymousList != null and isAnonymousList.size > 0">
                <foreach item="item" separator="," open="AND is_anonymous in (" close=")" collection="isAnonymousList">#{item,jdbcType=BOOLEAN}</foreach>
            </if>
            <if test="nickName!=null and nickName!=''">AND nick_name = #{nickName,jdbcType=VARCHAR}</if>
            <if test="nickNameLike != null and nickNameLike != '' ">AND nick_name LIKE concat(#{nickNameLike,jdbcType=VARCHAR},'%')</if>
            <if test="nickNameList != null and nickNameList.size > 0">
                <foreach item="item" separator="," open="AND nick_name in (" close=")" collection="nickNameList">#{item,jdbcType=VARCHAR}</foreach>
            </if>
            <if test="isReply!=null">AND is_reply = #{isReply,jdbcType=BOOLEAN}</if>
            <if test="isReplyList != null and isReplyList.size > 0">
                <foreach item="item" separator="," open="AND is_reply in (" close=")" collection="isReplyList">#{item,jdbcType=BOOLEAN}</foreach>
            </if>
            <if test="createTimeFrom != null"><![CDATA[AND create_time >= #{createTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="createTimeTo != null"><![CDATA[AND create_time <= #{createTimeTo,jdbcType=TIMESTAMP}]]></if>
            <if test="updateTimeFrom != null"><![CDATA[AND update_time >= #{updateTimeFrom,jdbcType=TIMESTAMP}]]></if>
            <if test="updateTimeTo != null"><![CDATA[AND update_time <= #{updateTimeTo,jdbcType=TIMESTAMP}]]></if>
        </where>
        <choose>
            <when test="orderBy!=null and orderBy!=''">order by ${orderBy}</when>
            <otherwise>order by id</otherwise>
        </choose>
    </select>

    <insert id="insertBatch" parameterType="java.util.List">
        insert into tb_goods_comment (
            user_id,
            goods_id,
            order_goods_id,
            is_anonymous,
            nick_name,
            content,
            pic_urls,
            is_reply,
            reply_content,
            create_time,
            update_time        )
        values
        <foreach collection="modelList" item="bean" index="index" separator=",">
        (
            #{bean.userId,jdbcType=BIGINT} ,
            #{bean.goodsId,jdbcType=BIGINT} ,
            #{bean.orderGoodsId,jdbcType=BIGINT} ,
            #{bean.isAnonymous,jdbcType=BOOLEAN} ,
            #{bean.nickName,jdbcType=VARCHAR} ,
            #{bean.content,jdbcType=VARCHAR} ,
            #{bean.picUrls,jdbcType=VARCHAR} ,
            #{bean.isReply,jdbcType=BOOLEAN} ,
            #{bean.replyContent,jdbcType=VARCHAR} ,
            #{bean.createTime,jdbcType=TIMESTAMP} ,
            #{bean.updateTime,jdbcType=TIMESTAMP}         )
        </foreach>
    </insert>

    
</mapper>